#SET CONCEPTS
35.Write a program to find the union of two sets.
set1 = {"apple","banana","cherry"}
set2 = {1,2,3}

set3 = {}

set3 = set1.union(set2)
print(set3)

36.Write a program to find the intersection of two sets.
set1 = {1,2,3,4,5}
set2 = {1,2,3,7,8}
set3 ={}

if len(set1)==0 or len(set2)==0:
    print("Enter the set values.")
else:
    set3 = set1.intersection(set2)
    print(set3)
    
37.Write a program to check if a specific element exists in a set.
set1 = {1,2,3,4,5}
n = int(input("Enter the number:"))
flag = False

if len(set1)!=0:
    for element in set1:
        if n == element:
            flag = True
else:
    print("Enter the set values")

if flag == True:
    print("Yes, element",n,"is present in the set.")
else:
    print("No element",n,"not found.")

38.Write a program to remove duplicates from a list and convert it to a set.
temp_list = [1,2,3,4,5,5,4,6,6,6,7,7,7,7,8,8,9,9]
new_list =[]
set1 = {}

if len(temp_list)!=0:
    for element in temp_list:
        new_list.append(element)
else:
    print("Please enter list elements.")

if len(new_list) > 0:
    set1 = set(new_list)
    print(set1)
else:
    print("No elements found.")


39.Write a program to perform set difference between two sets.
set1 = {1,2,3,4,5}
set2 = {3,4,5,6,7}
set3 = {}

if len(set1)!=0 and len(set2)!=0:
    set3 = set1 - set2
    print(set3)
else:
    print("Enter the valid elements.")

#Dictionaries
40.Write a program to create a dictionary and print its key-value pairs.
mydict = {
    "Car" : "Tesla",
    "Model" : "2023",
    "Year" : "2023",
    "Built_by" : "Elon Musk" 
}       

print(mydict)
new_model = mydict.copy()
print(new_model)
print(new_model.items())
print(new_model.get('Car'))
print(new_model.get('Year'))
print(new_model.get('Built_by'))
print(new_model.keys())

41.Write a program to check if a specific key exists in a dictionary.
new_dict = {
    "Model" : "Mustang",
    "Year" : "2023",
    "brand" : "Ford"
}

key = input("Enter the element need to be searched: ")

if key in new_dict:
    print("Yes, the specified element is present in the dictionary.")
else:
    print("No, the specified key doesnt exist in the dictionary.")



42.Write a program to find the length of a dictionary.
mydict = {
    "Name" : "Manasa",
    "Id" : "RED011",
    "Department" : "IT"
}

print(len(mydict),"is the length of the given dictionary.")


43.Write a program to iterate over the key-value pairs of a dictionary.
new_dict  = {
    "Name" : "Manasa",
    "id" : "RED011",
    "department" : "IT",
    "Education" : "BCA"
}

for key, value in new_dict.items():
    print(f"Key: {key},Value: {value}")

                      (or)
                      
                      
new_dict  = {
    "Name" : "Manasa",
    "id" : "RED011",
    "department" : "IT",
    "Education" : "BCA"
}

for key, value in new_dict.items():
    print(i)
    
44.Write a program to remove a key-value pair from a dictionary.
mydict = {
    "Name" : "Manasa",
    "id" : "RED011",
    "Department" : "IT",
    "Education" : "BCA"
}

mydict.pop("Department")
mydict.popitem()
print(mydict)

#If-Else Concepts
45.Write a program to check if a given number is positive, negative, or zero.
n = int(input("Enter the digit: "))

if n > 0:
    print("The entered digit",n,"is positive.")
elif n < 0:
    print("The entered digit",n,"is negative.")
else:
    print("The entered digit",n,"is zero.")


46.Write a program to determine if a year is a leap year or not.
year = int(input("Enter a year: "))

if(year % 4 == 0 and year % 100 != 0 ) or (year % 400 == 0):
    print(year, "is a leap year.")
else:
    print(year,"is not a leap year.")


47.Write a program to find the largest of three numbers.
n1 = int(input("Enter the first digit: "))
n2 = int(input("Enter the second digit: "))
n3 = int(input("Enter the third digit: "))

if n1>n2 and n1>n3:
    print(n1," is the largest number.")
elif n2>n1 and n2>n3:
    print(n2," is the largest number.")
else:
    print(n3," is the largest number.")

48.Write a program to determine if a given number is even or odd.
n = int(input("Enter the number: "))

if n % 2 == 0 :
    print("The number is even")
else:
    print("The number is odd")
    
    
49.Write a program to check if a given sentence is a palindrome. Ignore spaces, punctuation,
and capitalization while checking for a palindrome. Example: "A man, a plan, a canal, Panama!" should be considered a palindrome
import re

sentence = "A man, a plan, a canal, Panama!"

#Remove spaces and punctuation from the sentence
cleaned_sentence = re.sub(r'[^a-zA-Z]','',sentence.lower())

#check if the cleaned sentence is equal to its reverse
if cleaned_sentence == cleaned_sentence[::-1]:
    print("The sentence is a palindrome.")
else:
    print("The sentence is not a palindrome.")
    

#While Loop
50.Write a program to print the numbers from 1 to 10 using a while loop.
i = 0
while i < 10:
    i += 1
    print(i)
    
    
51.Write a program that continuously prompts the user to enter a number until they enter a negative number. Display the sum of all the positive numbers entered.
n = int(input("Enter the number: "))
sum_positive_numbers = 0

while n >= 0:
    sum_positive_numbers += n
    n = int(input("Enter the number (negative number to exit): "))


print("Sum of positive numbers entered: ", sum_positive_numbers)

52.Write a program that prints all the even numbers from 1 to 20 using a while loop.
i  = 1

while i<= 20:
    if i % 2 == 0:
        print(i)
    i += 1    

print("The above printed numbers are even numbers between 2 to 20.")

53.Write a program that asks the user to guess a secret number between 1 and 100. Keep prompting the user for guesses until they guess the correct number. Provide feedback if the guess is too high or too low.
secret_number = 42
count = 0 

while True:
    guess = int(input("Guess the secret number between 1 and 100 (enter -1 to exit): "))

    if guess == -1:
        print("Exiting the program...")
        break 

    count += 1

    if guess  == secret_number:
        print("Congratulations! You guessed the secret number in", count, "tries.")
        break
    elif guess < secret_number:
        print("Too low! Try again.")
    else:
        print("Too high! Try again.")



54.Write a program that calculates the factorial of a given number using a while loop. The factorial of a number n is the product of all positive integers from 1 to n.

n = int(input("Enter the number: "))
factorial = 1

while n > 0:
    factorial *= n
    n -= 1

print("The factorial is: ",factorial)


#For Loops
55.Write a program that prints the multiplication table of a given number using a for loop.
n = int(input("Enter the number for which table need to be built: "))


for value in range(1,11):
    result = n * value
    print(f"{n} * {value}={result}")

print("The above mentioned is the table of the digit",n)


56.Write a program that finds the largest element in a given list using a for loop.
num_list = [10,15,25,8,15]

largest = num_list[0]

for num in num_list:
    if num > largest:
        largest = num

if largest  > 0 :
    print("The largest number is: ", largest)
else:
    print("Please enter the number.")


57.Write a program that prints the Fibonacci sequence up to a specified number of terms using a for loop.
terms = int(input("Enter the number of fibonacci terms to generate: "))

#Initialize the first two terms
a,b = 0,1
fibonacci_sequence = [a,b]

#generate the fibonacci sequence
for i in range(2, terms):
    next_number = a + b
    fibonacci_sequence.append(next_number)
    a,b = b,next_number

#print the fibonacci sequence
print(fibonacci_sequence)



58.Write a program that prints a pattern of asterisks in a right-angled triangle shape using a for loop.
asterisks = "*"
rows = 5

for i in range(1,rows+1):
    print(asterisks * i)
    
59.Write a program that counts the number of occurrences of a specific character in a given string using a for loop.
string = "manasa"
element = input("Enter the character to be found: ")
occurance = 0

for ele in string:
    if ele == element:
        occurance += 1
        
print("The occurance of the character",element," is: ",occurance)


#Functions
60.Write a function that takes two numbers as parameters and returns their sum.
def sum_func(a,b):
    s = a+b 
    return s

#User input
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

result  = sum_func(num1, num2)
print("The sum is: ",result)




61.Write a function that takes a list of numbers as a parameter and returns the average of those numbers.
def calculate_average(numbers):
    if len(numbers) == 0:
        return 0  #Avoid divison by zero for an empty list 

    total = sum(numbers)
    average = total / len(numbers)
    return average

numbers = [2,3,4,5,6]
result= calculate_average(numbers)
print(result)
  
                           (OR)
                           
                           
 def calculate_average(numbers):
    if len(numbers) == 0:
        return 0
    
    total = sum(numbers)
    average = total/len(numbers)
    return average


#Get the input from the user
user_input = input("Enter a list of numbers (space - separated):")

#Convert the input string into a list of numbers
numbers = list(map(float, user_input.split()))

#Calculate the average using the function
result = calculate_average(numbers)

#Print the result
print("Average:",result)

62.Write a function that checks whether a given number is prime or not and returns a boolean value.
import math

def is_prime(number):
    if number <= 1:
        return False
    
    #check divisibility from 2 to the square root of the number
    for i in range(2, int(math.sqrt(number))+1):
        if number % i == 0:
            return False
        
    return True

num = 10
result = is_prime(num)
print(result)



63.Write a function that takes a string as a parameter and returns the reverse of that string.
def reverse_string(string):
    new_string = string[::-1]
    print(new_string)


new_string = input("Enter the string: ")
reverse_string(new_string)

64.Write a function that takes a list of strings as a parameter and returns a new list containing only the strings that have more than five characters.


#Arrays
65.Write a program to find the maximum element in an array.
array = [1,2,3,4,5]
print(max(array))

66.Write a program to find the sum of all elements in an array.
array = [10,20,30]
sum = 0

for element in array:
    sum += element
    element = element + 1

if sum >0:
    print(sum)
else:
    print("Please enter the elements into the list")
    


67.Write a program to count the number of occurrences of a specific element in an array.
#Initialize Array
arr = [1,2,6,9,10,10]
#Array fr will store frequencies of element 
fr = [None] * len(arr)
visited = -1

for i in range(0,len(arr)):
    count = 1
    for j in range(i+1, len(arr)):
        if(arr[i]==arr[j]):
            count = count +1
            #to avoid counting same element again
            fr[j] = visited
    
    if(fr[i] != visited):
        fr[i] = count


#Displays the frequency of each element present in array
print('------------------------')
print("Element | Frequency")
print('------------------------')
for i in range(0, len(fr)):
    if(fr[i] != visited):
        print(" "+str(arr[i])+" | " + str(fr[i]))
print("------------------------")

68.Write a program to remove all duplicate elements from an array.
def remove_duplicates(array):
    #create a set of all the elements in the array
    unique_elements = set(array)

    #Create a new array with the unique elements.
    new_array  = []
    for element in unique_elements:
        new_array.append(element)
    return new_array

array = [1,2,3,1,2,4,5]
new_array = remove_duplicates(array)
print(new_array)


69.Write a program to check if an array is sorted in ascending order
def is_sorted(array):
    #check if the array is empty
    if not array:
        return True
    
    #Check if all the elements in the array are in ascending order.
    for i in range(len(array) - 1):
        if array[i] > array[i + 1]:
            return False
    
    return True

array = [1,2,3,4,5]
print(is_sorted(array))

#CLASSES AND OBJECTS 
70.Create a class called "Rectangle" with attributes length and width. Write methods to calculate the area and perimeter of the rectangle.
class Rectangle:
    """A class representing a rectangle.

  Attributes:
    length: The length of the rectangle.
    width: The width of the rectangle.
  """
    def __init__(self,length,width):
        """Initializes a new rectangle.

    Args:
      length: The length of the rectangle.
      width: The width of the rectangle.
    """
        self.length = length
        self.width = width

    def area(self):
        """Returns the area of the rectangle.

    Returns:
      The area of the rectangle.
    """
        return self.length * self.width
    
    def perimeter(self):
        """Returns the perimeter of the rectangle.

    Returns:
      The perimeter of the rectangle.
    """
        return 2 * (self.length + self.width)
    

rectangle = Rectangle(10,5)
print(rectangle.area())

print(rectangle.perimeter())



71.Create a class called "Student" with attributes name, age, and grade. Write a method to display the student's information.
class Student:
    """A class representing a student.

  Attributes:
    name: The name of the student.
    age: The age of the student.
    grade: The grade of the student.
  """
    def __init__(self,name,age,grade):
        """Initializes a new student.

    Args:
      name: The name of the student.
      age: The age of the student.
      grade: The grade of the student.
    """
        self.name = name
        self.age = age
        self.grade = grade

    def display_information(self):
        """Displays the student's information.
    """
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Grade: {self.grade}")

student  = Student("John Doe",12,8)
student.display_information()



72.Create a class called "BankAccount" with attributes account number and balance. Write methods to deposit and withdraw money from the account.
class BankAccount:
    """A class representing a bank account.

  Attributes:
    account_number: The account number of the bank account.
    balance: The balance of the bank account.
  """
    
    def __init__(self,account_number, balance):
        """Initializes a new bank account.

    Args:
      account_number: The account number of the bank account.
      balance: The balance of the bank account.
    """
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        """Deposits money into the bank account.

    Args:
      amount: The amount of money to deposit.
    """
        self.balance += amount

    def withdraw(self, amount):
        """Withdraws money from the bank account.

    Args:
      amount: The amount of money to withdraw.

    Raises:
      ValueError: If the amount to withdraw is greater than the balance of the account.
    """
        if amount > self.balance:
            raise ValueError("Insufficient funds")
        self.balance -= amount

    def get_balance(self):
        """Returns the balance of the bank account.

    Returns:
      The balance of the bank account.
    """
        return self.balance
    
account = BankAccount("1234567890",1000)
account.deposit(100)
print(account.get_balance())
account.withdraw(50)
print(account.get_balance())   


73.Create a class called "Car" with attributes make, model, and year. Write a method to display the car's information.
class Car:
    def __init__(self,make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def display_info(self):
        print("Make: ",self.make)
        print("Model: ",self.model)
        print("Year: ",self.year)

#Create a new car object
my_car = Car("Tesla","Model S",2022)

#Display the car's information
my_car.display_info()




74.Create a class called "Employee" with attributes name, salary, and position. Write a method to calculate and display the employee's annual salary.
class Employee:
    def __init__(self,name,salary,position):
        self.name = name
        self.salary = salary
        self.position = position

    def calculate_annual_salary(self):
        return self.salary * 12
    
    def display_employee_details(self):
        print("Name: ",self.name)
        print("Salary: ",self.salary)
        print("Position: ",self.position)

#Create an employee object
employee = Employee("John Doe",50000,"Software Engineer")

#Calculate and display the employee's annual salary
annual_salary = employee.calculate_annual_salary()
print("Annual Salary: ",annual_salary)

#Display the employee's details
employee.display_employee_details()

#Inheritance
75.Create a parent class called "Animal" with a method called "eat". Create a child class called "Dog" that inherits from the Animal class and adds a method called "bark".
class Animal:
    def eat(self):
        print("I am eating.")

class Dog(Animal):
    def bark(self):
        print("Woof!")

#Create a dog object
dog = Dog()

#Call the eat method
dog.eat()

#call the bark method
dog.bark()



76.Create a parent class called "Shape" with attributes length and width. Create child classes called "Rectangle" and "Square" that inherit from the Shape class and override the area method to calculate the area of the corresponding shape.
77.Create a parent class called "Vehicle" with attributes make, model, and year. Create child classes called "Car" and "Motorcycle" that inherit from the Vehicle class and add specific attributes and methods.
class Vehicle:
    def __init__(self,make,model,year):
        self.make = make
        self.model = model
        self.year = year

    def get_make(self):
        return self.make
    
    def get_model(self):
        return self.model
    
    def get_year(self):
        return self.year
    
class Car(Vehicle):
    def __init__(self, make, model, year, num_of_doors):
        super().__init__(make, model, year)
        self.num_of_doors = num_of_doors
    
    def get_num_of_doors(self):
        return self.num_of_doors
    
class Motorcycle(Vehicle):
    def __init__(self, make, model, year,engine_size):
        super().__init__(make, model, year)
        self.engine_size = engine_size

    def get_engine_size(self):
        return self.engine_size
    

#Create a car object
car = Car("Toyota","Camry",2023,4)

#Print the car's make, model, year, and number of doors
print("The car's make is:",car.get_make())
print("The car's model is: ",car.get_model())
print("The car's year is: ",car.get_year())
print("The car's number of doors is:",car.get_num_of_doors())

#Create a motorcycle object
motorcycle = Motorcycle("Harley-Davidson","Sportster",2023,1200)

#Print the motorcycle's make, model, year and engine size
print("The motorcycle make is:",motorcycle.get_make())
print("The motorcycle's model is:",motorcycle.get_model())
print("The motorcycle's year is:",motorcycle.get_year())
print("The motorcycle's engine size is:", motorcycle.get_engine_size())





78.Create a parent class called "Person" with attributes name and age. Create a child class called "Employee" that inherits from the Person class and adds attributes such as position and salary.
class Person:
    def __init__(self,name, age):
        self.name = name
        self.age = age

class Employee(Person):
    def __init__(self, name, age,position,salary):
        super().__init__(name, age)
        self.position = position
        self.salary = salary

#Create an employee object
employee = Employee("John Doe",30,"Software Engineer",10000)

#Print the employee's name, age, position, and salary
print("The employee's name is: ", employee.name)
print("The employee's age is: ",employee.age)
print("The employee's position is:",employee.position)
print("The employee's salary is:",employee.salary)


79.Create a parent class called "BankAccount" with attributes account number and balance. Create child classes called "CheckingAccount" and "SavingsAccount" that inherit from the BankAccount class and add specific methods for depositing and withdrawing money.
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            raise ValueError("Insufficient funds")
        self.balance -= amount


class CheckingAccount(BankAccount):
    def __init__(self, account_number, balance, monthly_fee):
        super().__init__(account_number, balance)
        self.monthly_fee = monthly_fee

    def withdraw(self, amount):
        super().withdraw(amount)
        self.balance -= self.monthly_fee


class SavingsAccount(BankAccount):
    def __init__(self, account_number, balance, interest_rate):
        super().__init__(account_number, balance)
        self.interest_rate = interest_rate

    def earn_interest(self):
        self.balance += self.balance * self.interest_rate


# Create a checking account object
checking_account = CheckingAccount("123456789", 1000, 10)

# Deposit $500
checking_account.deposit(500)

# Withdraw $200
checking_account.withdraw(200)

# Print the checking account balance
print("The checking account balance is:", checking_account.balance)

# Create a savings account object
savings_account = SavingsAccount("987654321", 500, 0.05)

# Earn interest
savings_account.earn_interest()

# Print the savings account balance
print("The savings account balance is:", savings_account.balance)



#Iterators
80.Create a custom iterator called "RangeIterator" that takes a start and end value and iterates over the range of values, returning each value.
class RangeIterator:
    def __init__(self, start, end):
        self.start = start
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.start > self.end:
            raise StopIteration
        else:
            value = self.start
            self.start += 1
            return value


# Create a range iterator object
range_iterator = RangeIterator(1, 10)

# Iterate over the range iterator and print each value
for value in range_iterator:
    print(value)


81.Implement a custom iterator called "FibonacciIterator" that generates the Fibonacci sequence and returns each number in the sequence.
class FibonacciIterator:
    def __init__(self, max_terms):
        self.max_terms = max_terms
        self.current_term = 0
        self.previous_term = 1

    def __iter__(self):
        return self

    def __next__(self):
        if self.current_term > self.max_terms:
            raise StopIteration
        else:
            value = self.current_term
            self.current_term, self.previous_term = self.previous_term + self.current_term, self.current_term
            return value


# Create a Fibonacci iterator object
fibonacci_iterator = FibonacciIterator(10)

# Iterate over the Fibonacci iterator and print each value
for value in fibonacci_iterator:
    print(value)


82.Write a program that uses the built-in "iter" function to create an iterator for a list and iterate over its elements using a "for" loop.
list_of_numbers = [1, 2, 3, 4, 5]

# Create an iterator for the list
iterator = iter(list_of_numbers)

# Iterate over the iterator using a for loop
for number in iterator:
    print(number)


83.Create a custom iterator called "FileLineIterator" that reads a text file and iterates over each line in the file, returning each line as a string.
84.Implement a custom iterator called "PrimeIterator" that generates prime numbers and returns each prime number in the sequence.

#Polymorphism
85.Create a base class called "Shape" with a method called "area()". Create derived classes such as "Circle", "Rectangle", and "Triangle" that override the "area()" method to calculate the area specific to each shape. Use polymorphism to call the "area()" method on different shape objects.
86.Create a base class called "Animal" with a method called "make_sound()". Create derived classes such as "Dog", "Cat", and "Cow" that override the "make_sound()" method to produce the sound specific to each animal. Use polymorphism to call the "make_sound()" method on different animal objects.
class Animal:
    def __init__(self, name):
        self.name = name

    def make_sound(self):
        raise NotImplementedError("Make sound method not implemented in base class")


class Dog(Animal):
    def __init__(self, name):
        super().__init__(name)

    def make_sound(self):
        return "Woof!"


class Cat(Animal):
    def __init__(self, name):
        super().__init__(name)

    def make_sound(self):
        return "Meow!"


class Cow(Animal):
    def __init__(self, name):
        super().__init__(name)

    def make_sound(self):
        return "Moo!"


# Create a dog object
dog = Dog("Dog")

# Print the sound made by the dog
print(dog.make_sound())

# Create a cat object
cat = Cat("Cat")

# Print the sound made by the cat
print(cat.make_sound())

# Create a cow object
cow = Cow("Cow")

# Print the sound made by the cow
print(cow.make_sound())


87.Create a class called "Car" with a method called "drive()". Create derived classes such as "Sedan", "SUV", and "SportsCar" that override the "drive()" method to provide different driving experiences. Use polymorphism to call the "drive()" method on different car objects.
class Car:
    def __init__(self, name, make):
        self.name = name
        self.make = make

    def drive(self):
        print(f"The {self.name} is driving.")


class Sedan(Car):
    def drive(self):
        print(f"The {self.name} is driving smoothly.")


class SUV(Car):
    def drive(self):
        print(f"The {self.name} is driving ruggedly.")


class SportsCar(Car):
    def drive(self):
        print(f"The {self.name} is driving fast.")


# Create a sedan object
sedan = Sedan("Sedan", "Toyota")

# Drive the sedan
sedan.drive()

# Create an SUV object
suv = SUV("SUV", "Ford")

# Drive the SUV
suv.drive()

# Create a sports car object
sports_car = SportsCar("Sports Car", "Ferrari")

# Drive the sports car
sports_car.drive()



88.Create a base class called "Shape" with a method called "draw()". Create derived classes such as "Circle", "Rectangle", and "Triangle" that override the "draw()" method to draw the shape on the screen using a graphics library. Use polymorphism to call the "draw()" method on different shape objects.
import turtle

class Shape:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color

    def draw(self):
        raise NotImplementedError("Draw method not implemented in base class")


class Circle(Shape):
    def __init__(self, x, y, radius, color):
        super().__init__(x, y, color)
        self.radius = radius

    def draw(self):
        turtle.penup()
        turtle.goto(self.x, self.y)
        turtle.pendown()
        turtle.circle(self.radius)


class Rectangle(Shape):
    def __init__(self, x, y, width, height, color):
        super().__init__(x, y, color)
        self.width = width
        self.height = height

    def draw(self):
        turtle.penup()
        turtle.goto(self.x, self.y)
        turtle.pendown()
        turtle.forward(self.width)
        turtle.right(90)
        turtle.forward(self.height)
        turtle.right(90)
        turtle.forward(self.width)
        turtle.right(90)
        turtle.forward(self.height)


class Triangle(Shape):
    def __init__(self, x, y, base, height, color):
        super().__init__(x, y, color)
        self.base = base
        self.height = height

    def draw(self):
        turtle.penup()
        turtle.goto(self.x, self.y)
        turtle.pendown()
        turtle.forward(self.base / 2)
        turtle.right(60)
        turtle.forward(self.height)
        turtle.right(120)
        turtle.forward(self.base / 2)


# Create a circle object
circle = Circle(0, 0, 100, "red")

# Draw the circle
circle.draw()

# Create a rectangle object
rectangle = Rectangle(100, 100, 200, 100, "blue")

# Draw the rectangle
rectangle.draw()

# Create a triangle object
triangle = Triangle(200, 200, 100, 50, "green")

# Draw the triangle
triangle.draw()

89.Create a base class called "Employee" with a method called "calculate_salary()". Create derived classes such as "Manager", "Developer", and "Tester" that override the "calculate_salary()" method to calculate the salary based on the specific role. Use polymorphism to call the "calculate_salary()" method on different employee objects.
class Employee:
    def __init__(self, name, role, experience):
        self.name = name
        self.role = role
        self.experience = experience

    def calculate_salary(self):
        raise NotImplementedError("Calculate salary method not implemented in base class")


class Manager(Employee):
    def calculate_salary(self):
        return 100000 + (self.experience * 1000)


class Developer(Employee):
    def calculate_salary(self):
        return 80000 + (self.experience * 500)


class Tester(Employee):
    def calculate_salary(self):
        return 60000 + (self.experience * 250)


# Create a manager object
manager = Manager("John Doe", "Manager", 10)

# Calculate the manager's salary
salary = manager.calculate_salary()

# Print the manager's salary
print(salary)

# Create a developer object
developer = Developer("Jane Doe", "Developer", 5)

# Calculate the developer's salary
salary = developer.calculate_salary()

# Print the developer's salary
print(salary)

# Create a tester object
tester = Tester("Jack Doe", "Tester", 2)

# Calculate the tester's salary
salary = tester.calculate_salary()

# Print the tester's salary
print(salary)
