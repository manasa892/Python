#1.Write a Python program to print "Hello, World!".
print("Hello World")

#2.Write a Python program to add two numbers entered by the user.
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
sum = num1 + num2 
print("Addition of two numbers are: ",sum)


#3.Write a Python program to check if a number is even or odd.
num = int(input("Enter the number: "))
if num % 2 == 0:
    print(num,"is Even")
else:
    print(num,"is Odd")

#4.Write a Python program to find the largest number in a list.
max_num = [10,5,3,15]
largest_num = max_num[0]
for i in max_num:
    if i > largest_num:
       largest_num = i

if largest_num in max_num:
    print(largest_num,"is the largest number")
else:
    print("Enter a valid number")

#5.Write a Python program to check if a given string is a palindrome.
string = str(input("Enter the string: "))
reverse_string = string[::-1]
if reverse_string == string:
    print(string,"is a Palindrome")
else:
    print(string,"is not a palindrome")

#6.Write a Python program to calculate the factorial of a number.
num = int(input("Enter a number : "))

factorial = 1

#check if the number is negative, positive or zero
if num < 0 :
    print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
    print("The factorial of 0 is 1")
else:
    for i in range(1, num+1):
        factorial  = factorial * i
    print("The factorial of", num, "is", factorial)
    
#7. Write a Python program to find the sum of all numbers in a list.
list = [1,2,3,4]
sum_of_numbers = 0

for i in list:
    sum_of_numbers = sum_of_numbers + i

print(sum_of_numbers, "is the sum of numbers")

#8. Write a Python program to check if a number is prime.

num = int(input("Enter the number: "))

for i in range(2,num):
    if num % i == 0:
          print(num, "is not a prime number.")
          break        
else:
    print(num,"is a prime number")
 
#9.Write a Python program to count the number of vowels in a given string.
name = input("Enter the string: ")
list_string = list(name)
vowels = ['a','e','i','o','u']
vowels_count = 0


for i in range(len(list_string)):
    if list_string[i] in vowels:
        vowels_count = vowels_count + 1
   
if vowels_count > 0:
    print("The total number of vowels in the string is: ", vowels_count)
else:
    print("The string does not contain any vowels")
            
 
#10.Write a Python program to reverse a string.
string = input("Enter the string: ")
reverse_string = string[::-1]
print(reverse_string)

#11.Fibonacci Series
terms = int(input("Enter the number of Fibonacci terms to generate: "))

#Initialize the first two terms
a,b = 0,1
fibonacci_sequence = [a,b]

#Generate the Fibonacci sequence
for i in range(2, terms):
    next_number = a + b
    fibonacci_sequence.append(next_number)
    a,b = b, next_number

#print the Fibonacci sequence
print(fibonacci_sequence)

#12. Write a Python program that takes a list of numbers as input and returns a new list containing only the even numbers 
#from the original list. Use list comprehension to solve this problem.
num = [55,144,26,39]
nums_count = []

for i in num:
    if i % 2 == 0:
        nums_count.append(i)

if(len(nums_count) > 0):
    print("The even numbers in the list are: ",nums_count)
else:
    print("The list doesnot contain any even numbers.")



#13.Write a Python function that takes a matrix (a list of lists) as input and returns its transpose. The transpose of a matrix switches the rows and columns. 
#For example, if the input matrix is [[1, 2, 3], [4, 5, 6]], the output should be [[1, 4], [2, 5], [3, 6]].



#14.Write a Python function that takes two strings as input and returns True if they are anagrams and False otherwise. 
#Anagrams are words or phrases formed by rearranging the letters of another word or phrase. For example, "listen" and "silent" are anagrams.
string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")

is_anagram = True

if len(string1) != len(string2):
    is_anagram = False
else:
    for i in range(len(string1)):
        if string1[i] == string2[i]:
            is_anagram = True
            break

if is_anagram:
    print(string1, "and", string2, "are anagrams.")
else:
    print(string1, "and", string2, "are not anagrams.")


#15. Write a Python program to remove duplicate elements from a list.
num_list = [1,1,2,3,3,4,5,5,5,7,7,7,7]

num_list = list(set(num_list))       
print("The new list: ","\n",num_list)

#16. Write a Python program to find the second largest number in a list.
num_list = [1,3,4,7,10]
num_list.sort(reverse = True)
print("The new sorted list is: ","\n",num_list)
print("The second largest number in the list is",num_list[1])

#17. Write a python program to find the common elements between two lists.
num_list1 = [2,3,3,4,4,4,4,4,4,5]
num_list2 = [2,3,4,5]
flag = False

if len(num_list1) or len(num_list2) != 0:
            for i in range(len(num_list1)) and range(len(num_list2)):
                if num_list1[i] == num_list2[i]:
                        flag = True

if flag == True:
        print("Elements between two lists are in similar")
else:
        print("Elements between two lists are not similar")
                
#18.Write a Python program to find the largest and smallest elements in a given list.
num_list = [51,2,3,46,1]
new_list= list(set(num_list))

print(new_list[0],"is the smallest element.","\n",new_list[-1]," is the largest element.")

#19.Write a Python program to count the occurrences of each element in a given list.
num_list = [1,2,2,3,3,4,4,5]
occurance_count = {}

if len(num_list) != 0:
    for element in num_list:
        if element in occurance_count:
            occurance_count[element] += 1
        else:
            occurance_count[element] = 1

print("Occurrences: ",occurance_count)


#20.Write a Python program to find the sum of all even numbers in a given list.
new_list = [1,2,3,4]
sum = 0

for element in new_list:
    if element % 2 == 0:
        sum = sum + element

if sum > 0:
    print(sum,"is the sum of all even numbers in the given list.")
else:
    print("There are no elements divisble by 2.")


#21.Write a Python program to remove duplicates from a list while preserving the original order.
List_temp = [1,1,2,2,2,3,3,4,4,4,5,5,6,6,8]
new_list =[]

for element in List_temp:
    if element not in new_list:
        new_list.append(element)
        

if len(new_list) > 0:
    print(new_list," is the list after removing duplicates")
else:
    print("The list doesnot contain any data")

#Programs on Different Data Types 
#22.Lists: Write a Python program to find the second largest element in a given list.
list_temp = [3,4,6,7,8,1]
list_temp.sort()
print(list_temp[-2]," is the second largest element in a given list.")


#23.Tuples: Write a Python program to find the common elements between two tuples.
mytuple1 = (1,2,3,4,5,6)
mytuple2 = (2,3,4,7,8,6)
mytuple3 = ()

if len(mytuple1) != 0 or len(mytuple2) != 0:
    smaller_tuple = mytuple1 if len(mytuple1) <= len(mytuple2) else mytuple2
    for element in smaller_tuple:
        if element in mytuple1 and element in mytuple2:
            mytuple3 += (element, )
else:
    print("Tuples do not contain elements.")

if len(mytuple3) > 0:
    print(mytuple3," are the common elements between two tuples")
else:
    print("There are no common elements between the tuples")


#24.Sets: Write a Python program to find the union and intersection of two sets.
set1 = {"apple","banana","cherry"}
set2 = {"apple","grapes"}

z = set1.union(set2)
y = set1.intersection(set2)
z.add("orange")
x = z.copy()

print(z)
print(y)
print(x)

#LIST CONCEPTS
25.Write a program to find the index of a specific element in a list.
# Step 1: Create a list
my_list = [10, 20, 30, 40, 50]

# Step 2: Prompt the user to enter the element
target_element = int(input("Enter the element to find its index: "))

# Step 4: Find the index of the target_element
try:
    index = my_list.index(target_element)
    print("The index of", target_element, "is", index)
except ValueError:
    print("Element not found in the list.")
    
    
                       (OR)
  
 # Step 1: Create a list
my_list = [10, 20, 30, 40, 50]

# Step 2: Prompt the user to enter the element
target_element = int(input("Enter the element to find its index: "))

# Step 3: Initialize a variable to keep track of the index
index = None

# Step 4: Iterate over the list and find the index of the target_element
for i in range(len(my_list)):
    if my_list[i] == target_element:
        index = i
        break

# Step 5: Check if the index is found or not
if index is not None:
    print("The index of", target_element, "is", index)
else:
    print("Element not found in the list.")




26.Write a program to reverse a list without using the reverse() method.
temp_list = [1,2,3,4,5]
new_list = []

if len(temp_list)> 0:
    for value in temp_list:
        new_list = [value] + new_list
else:
    print("Enter the values in the list")


if len(new_list)>0:
    print(new_list," is the new list")
else:
    print("Invalid")


27.Write a program to find the second largest and second smallest elements in a list.
new_list = [2,3,56,76,87]
new_list.sort()
print(new_list[-2]," is the second largest element in the given list.")
print(new_list[1]," is the second smallest element in the give list.")

28.Write a program to check if two lists are equal (have the same elements in the same order).
new_list1 = [1,2,3,5,4]
new_list2 = [2,3,4,5,1]
new_list1.sort()
new_list2.sort()
flag = False

if len(new_list1)!= 0 or len(new_list2) != 0:
    smaller_list = new_list1 if len(new_list1) <= len(new_list2) else new_list2
    for element in smaller_list:
        if element in new_list1 and element in new_list2:
            flag = True
else:
    print("Lists doesnot contain any elements")

if flag == True:
    print("Yes, the elements are equal and in the order")
else:
    print("No, the elements are not in the order")


29.Write a program to merge two sorted lists into a new sorted list.
temp_list1 = [1,2,3,4,5]
temp_list2 = [6,7,8,8,10]
new_list = []

if len(temp_list1) == 0 or len(temp_list2)== 0:
    print("Please enter the values into the list")
else:
    new_list = temp_list1 + temp_list2
    print("The merged list is as below","\n",new_list)






#TUPLE CONCEPTS
30.Write a program to find the length of a tuple.
thistuple = (1,2,3,4,5)
print(len(thistuple))

31.Write a program to check if a specific element exists in a tuple.
thistuple = (1,2,3,4,5)
n = int(input("Enter the element need to be searched: "))
flag = False

if len(thistuple) > 0:
    for element in thistuple:
        if n == element:
            flag = True
else:
    print("Please eneter the values into the list.")

if flag  == True:
    print("Yes, the element",n,"exists in the tuple.")
else:
    print("No,the element doesnot exist in the tuple.")

32.Write a program to concatenate two tuples.


33.Write a program to convert a tuple to a list.
34.Write a program to count the occurrences of a specific element in a tuple.

#SET CONCEPTS
35.Write a program to find the union of two sets.
36.Write a program to find the intersection of two sets.
37.Write a program to check if a specific element exists in a set.
38.Write a program to remove duplicates from a list and convert it to a set.
39.Write a program to perform set difference between two sets.

#Dictionaries
40.Write a program to create a dictionary and print its key-value pairs.
41.Write a program to check if a specific key exists in a dictionary.
42.Write a program to find the length of a dictionary.
43.Write a program to iterate over the key-value pairs of a dictionary.
44.Write a program to remove a key-value pair from a dictionary.

#If-Else Concepts
45.Write a program to check if a given number is positive, negative, or zero.
46.Write a program to determine if a year is a leap year or not.
47.Write a program to find the largest of three numbers.
48.Write a program to determine if a given number is even or odd.
49.Write a program to check if a given sentence is a palindrome. Ignore spaces, punctuation,
and capitalization while checking for a palindrome. Example: "A man, a plan, a canal, Panama!" should be considered a palindrome.

#While Loop
50.Write a program to print the numbers from 1 to 10 using a while loop.
51.Write a program that continuously prompts the user to enter a number until they enter a negative number. Display the sum of all the positive numbers entered.
52.Write a program that prints all the even numbers from 1 to 20 using a while loop.
53.Write a program that asks the user to guess a secret number between 1 and 100. Keep prompting the user for guesses until they guess the correct number. Provide feedback if the guess is too high or too low.
54.Write a program that calculates the factorial of a given number using a while loop. The factorial of a number n is the product of all positive integers from 1 to n.

#For Loops
55.Write a program that prints the multiplication table of a given number using a for loop.
56.Write a program that finds the largest element in a given list using a for loop.
57.Write a program that prints the Fibonacci sequence up to a specified number of terms using a for loop.
58.Write a program that prints a pattern of asterisks in a right-angled triangle shape using a for loop.
59.Write a program that counts the number of occurrences of a specific character in a given string using a for loop.

#Functions
60.Write a function that takes two numbers as parameters and returns their sum.
61.Write a function that takes a list of numbers as a parameter and returns the average of those numbers.
62.Write a function that checks whether a given number is prime or not and returns a boolean value.
63.Write a function that takes a string as a parameter and returns the reverse of that string.
64.Write a function that takes a list of strings as a parameter and returns a new list containing only the strings that have more than five characters.

#Arrays
65.Write a program to find the maximum element in an array.
66.Write a program to find the sum of all elements in an array.
67.Write a program to count the number of occurrences of a specific element in an array.
68.Write a program to remove all duplicate elements from an array.
69.Write a program to check if an array is sorted in ascending order.

#CLASSES AND OBJECTS 
70.Create a class called "Rectangle" with attributes length and width. Write methods to calculate the area and perimeter of the rectangle.
71.Create a class called "Student" with attributes name, age, and grade. Write a method to display the student's information.
72.Create a class called "BankAccount" with attributes account number and balance. Write methods to deposit and withdraw money from the account.
73.Create a class called "Car" with attributes make, model, and year. Write a method to display the car's information.
74.Create a class called "Employee" with attributes name, salary, and position. Write a method to calculate and display the employee's annual salary.

#Inheritance
75.Create a parent class called "Animal" with a method called "eat". Create a child class called "Dog" that inherits from the Animal class and adds a method called "bark".
76.Create a parent class called "Shape" with attributes length and width. Create child classes called "Rectangle" and "Square" that inherit from the Shape class and override the area method to calculate the area of the corresponding shape.
77.Create a parent class called "Vehicle" with attributes make, model, and year. Create child classes called "Car" and "Motorcycle" that inherit from the Vehicle class and add specific attributes and methods.
78.Create a parent class called "Person" with attributes name and age. Create a child class called "Employee" that inherits from the Person class and adds attributes such as position and salary.
79.Create a parent class called "BankAccount" with attributes account number and balance. Create child classes called "CheckingAccount" and "SavingsAccount" that inherit from the BankAccount class and add specific methods for depositing and withdrawing money.

#Iterators
80.Create a custom iterator called "RangeIterator" that takes a start and end value and iterates over the range of values, returning each value.
81.Implement a custom iterator called "FibonacciIterator" that generates the Fibonacci sequence and returns each number in the sequence.
82.Write a program that uses the built-in "iter" function to create an iterator for a list and iterate over its elements using a "for" loop.
83.Create a custom iterator called "FileLineIterator" that reads a text file and iterates over each line in the file, returning each line as a string.
84.Implement a custom iterator called "PrimeIterator" that generates prime numbers and returns each prime number in the sequence.

#Polymorphism
85.Create a base class called "Shape" with a method called "area()". Create derived classes such as "Circle", "Rectangle", and "Triangle" that override the "area()" method to calculate the area specific to each shape. Use polymorphism to call the "area()" method on different shape objects.
86.Create a base class called "Animal" with a method called "make_sound()". Create derived classes such as "Dog", "Cat", and "Cow" that override the "make_sound()" method to produce the sound specific to each animal. Use polymorphism to call the "make_sound()" method on different animal objects.
87.Create a class called "Car" with a method called "drive()". Create derived classes such as "Sedan", "SUV", and "SportsCar" that override the "drive()" method to provide different driving experiences. Use polymorphism to call the "drive()" method on different car objects.
88.Create a base class called "Shape" with a method called "draw()". Create derived classes such as "Circle", "Rectangle", and "Triangle" that override the "draw()" method to draw the shape on the screen using a graphics library. Use polymorphism to call the "draw()" method on different shape objects.
89.Create a base class called "Employee" with a method called "calculate_salary()". Create derived classes such as "Manager", "Developer", and "Tester" that override the "calculate_salary()" method to calculate the salary based on the specific role. Use polymorphism to call the "calculate_salary()" method on different employee objects.

